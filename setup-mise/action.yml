---
name: "setup-mise"

inputs:
  mise_envs:
    description: |
      A comma-separated list of environments.

      Mise looks for environment-targeted files named like mise.{ENV}.toml
      alongside the base mise.toml, and merges them with a defined precedence.

      Multiple environments can be specified in order, such as
      `mise_envs: "ci,test"`, with the last in the list taking precedence
      during merge.
    default: ""
    required: false
  mise_version:
    description: "The mise version to install (defaults to the latest)"
    default: ""
  working_directory:
    description: "The directory with the root of the project"
    default: "."
    required: false
  s3_credentials:
    description: |
      The S3 credentials as a JSON object. Must contain the following keys:

      - endpoint (no URL scheme)
      - access_key
      - secret_key
      - bucket_name
    type: "string"
    required: true

runs:
  using: "composite"
  steps:
    - name: "Retrieve mise configuration"
      id: "mise-config"
      run: |
        echo "data_dir=${MISE_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/mise}" | tee -a "$GITHUB_OUTPUT"

    - name: "Calculate mise config hash"
      id: "mise-config-hash"
      uses: "actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd" # v8.0.0
      env:
        MISE_WORKING_DIRECTORY: "${{ inputs.working_directory }}"
        MISE_ENV: "${{ inputs.mise_envs }}"
      with:
        script: |
          const fs = require('fs');
          const crypto = require('crypto');
          const path = require('path');

          const basePath = process.env.MISE_WORKING_DIRECTORY;
          const files = [path.join(basePath, 'mise.toml')];

          if (process.env.MISE_ENV) {
            const envs = process.env.MISE_ENV.split(',');
            for (const env of envs) {
              files.push(path.join(basePath, `mise.${env.trim()}.toml`));
            }
          }

          console.log('Files being hashed:', files);

          const hash = crypto.createHash('sha256');;
          for (const file of files) {
            if (fs.existsSync(file)) {
              console.log('Hashing file:', file);
              const content = fs.readFileSync(file);
              hash.update(content);
            } else {
              console.log('File not found:', file);
            }
          }

          core.setOutput('hash', hash.digest('hex'));

    - name: "Restore mise cache"
      id: "restore-mise-cache"
      uses: "bckground/actions-cache/restore@9c316ce988fd9d40977dad01d0c7fa06792fa0da"
      with:
        endpoint: ${{ fromJson(inputs.s3_credentials).endpoint }}
        accessKey: ${{ fromJson(inputs.s3_credentials).access_key }}
        secretKey: ${{ fromJson(inputs.s3_credentials).secret_key }}
        bucket: ${{ fromJson(inputs.s3_credentials).bucket_name }}
        use-fallback: false
        key: "mise-at-${{ github.repository }}-on-${{ runner.os }}-${{ runner.arch }}-${{ steps.mise-config-hash.outputs.hash }}"
        restore-keys: |
          mise-at-${{ github.repository }}-on-${{ runner.os }}-${{ runner.arch }}-
        path: |
          ${{ steps.mise-config.outputs.data_dir }}

    - name: "Set up mise"
      uses: "jdx/mise-action@5ac50f778e26fac95da98d50503682459e86d566" # v3.2.0
      env:
        MISE_ENV: "${{ inputs.mise_envs }}"
      with:
        version: "${{ inputs.mise_version }}"
        install: true # Run `mise install`.
        cache: false
        experimental: true # Enable experimental features.
        log_level: "debug"
        working_directory: "${{ inputs.working_directory }}"
        reshim: true

    - name: "Save mise cache"
      uses: "bckground/actions-cache/save@9c316ce988fd9d40977dad01d0c7fa06792fa0da"
      # `cache-hit == 'true'` means we found an exact match. We may have found
      # a partial match; in that case, or in case we found no match, we save
      # the cache.
      if: "steps.restore-mise-cache.outputs.cache-hit == 'false'"
      with:
        endpoint: ${{ fromJson(inputs.s3_credentials).endpoint }}
        accessKey: ${{ fromJson(inputs.s3_credentials).access_key }}
        secretKey: ${{ fromJson(inputs.s3_credentials).secret_key }}
        bucket: ${{ fromJson(inputs.s3_credentials).bucket_name }}
        use-fallback: false
        key: "mise-at-${{ github.repository }}-on-${{ runner.os }}-${{ runner.arch }}-${{ steps.mise-config-hash.outputs.hash }}"
        path: |
          ${{ steps.mise-config.outputs.data_dir }}
